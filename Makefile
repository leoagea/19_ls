###############################################################################
# Compiler & Flags
###############################################################################
CC       = clang
CFLAGS   = -Wall -Wextra -Werror -O2 -MMD -MP -fsanitize=address -g
# -MMD and -MP tell the compiler to generate .d (dependency) files for each .c

###############################################################################
# Project Settings
###############################################################################
TARGET   = ft_ls
SRC_DIR  = srcs
INC_DIR  = inc
OBJ_DIR  = build

# Libft info
LIBFT_DIR = libft
LIBFT_LIB = lib
LIBFT     = $(LIBFT_DIR)/$(LIBFT_LIB)/libft.a

###############################################################################
# Sources / Objects
###############################################################################
SRC_FILES = main.c \
			init.c \
			parseArg.c \
			explore.c \
			retrieveInfo.c \
			formatOutput.c \
			consoleOutput.c \
			colors.c \
			utils.c \
			free.c \
			debug.c
			
SRCS      = $(addprefix $(SRC_DIR)/, $(SRC_FILES))

OBJS      = $(addprefix $(OBJ_DIR)/, $(notdir $(SRCS:.c=.o)))

DEPS      = $(OBJS:.o=.d)

###############################################################################
# Default Rule
###############################################################################
all: $(TARGET)

###############################################################################
# Others Rules
###############################################################################
test: all
	@echo "Running tests with args: $(ARGS)"
	@ASAN_OPTIONS=detect_leaks=0 ./$(TARGET) $(ARGS)

tests: all
	@cd tests && bash run_tests.sh

###############################################################################
# Linking
###############################################################################
$(TARGET): $(OBJS) $(LIBFT)
	@$(CC) $(CFLAGS) -I$(INC_DIR) -o $@ $(OBJS) $(LIBFT)

###############################################################################
# Object File Compilation
###############################################################################
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c
	@mkdir -p $(OBJ_DIR)
	@$(CC) $(CFLAGS) -I$(INC_DIR) -c $< -o $@

###############################################################################
# Libft
###############################################################################
$(LIBFT):
	@$(MAKE) -C $(LIBFT_DIR)

###############################################################################
# Cleanup
###############################################################################
clean:
	rm -f $(OBJS) $(DEPS)
	$(MAKE) -C $(LIBFT_DIR) clean

fclean: clean
	rm -f $(TARGET)
	$(MAKE) -C $(LIBFT_DIR) fclean
	rm -rf $(OBJ_DIR)

re: fclean all

###############################################################################
# Dependency Handling
###############################################################################
-include $(DEPS)

###############################################################################
# Phony Targets
###############################################################################
.PHONY: all clean fclean re
